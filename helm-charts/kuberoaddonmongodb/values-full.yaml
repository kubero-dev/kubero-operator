mongodb:
  ## @section Global parameters
  global:
    ## @param global.imageRegistry Global Docker Image registry
    imageRegistry: ""
    ## @param global.imagePullSecrets Global Docker registry secret names as an array
    imagePullSecrets: []

  ## @section Common parameters
  ## @param nameOverride String to partially override mongodb.fullname
  nameOverride: ""
  ## @param fullnameOverride String to fully override mongodb.fullname
  fullnameOverride: ""
  ## @param commonLabels Labels to add to all deployed objects
  commonLabels: {}
  ## @param commonAnnotations Annotations to add to all deployed objects
  commonAnnotations: {}

  ## @section MongoDB image parameters
  image:
    ## @param image.registry MongoDB image registry
    registry: docker.io
    ## @param image.repository MongoDB image repository
    repository: mongo
    ## @param image.tag MongoDB image tag
    tag: "8.0.13@sha256:bf41aa48a1cc0ccc8e6071236acfc428b7110ec2cf14b47c8961bc472e2c7c61"
    ## @param image.pullPolicy MongoDB image pull policy
    pullPolicy: Always

  ## @param replicaCount Number of MongoDB replicas to deploy
  replicaCount: 1

  service:
    ## @param service.type Kubernetes service type
    type: ClusterIP
    ## @param service.port MongoDB service port
    port: 27017

  auth:
    ## @param auth.enabled Enable MongoDB authentication
    enabled: true
    ## @param auth.rootUsername MongoDB root username
    rootUsername: admin
    ## @param auth.rootPassword MongoDB root password (if empty, random password will be generated)
    rootPassword: ""
    ## @param auth.existingSecret Name of existing secret containing MongoDB password
    existingSecret: ""
    ## @param auth.existingSecretPasswordKey Key in existing secret containing MongoDB password
    existingSecretPasswordKey: ""

  ## @section config MongoDB configuration options
  config:
    ## @param config.mountPath MongoDB configuration options
    mountPath: /etc/mongo
    ## @param config.content Include your custom MongoDB configurations here as string
    content: |
      systemLog:
        quiet: false
        verbosity: 0
      net:
        bindIpAll: true
    ## param config.existingConfigmap Name of an existing Configmap to use instead of creating one
    existingConfigmap: ""
    ## param config.existingConfigmapKey Name of the key in the Configmap that should be used
    existingConfigmapKey: ""


  persistence:
    ## @param persistence.enabled Enable persistent storage
    enabled: true
    ## @param persistence.storageClass Storage class to use for persistent volume
    storageClass: ""
    ## @param persistence.accessMode Access mode for persistent volume
    accessMode: ReadWriteOnce
    ## @param persistence.size Size of persistent volume
    size: 8Gi
    ## @param persistence.mountPath Mount path for MongoDB data
    mountPath: /data/db
    ## @param persistence.annotations Annotations for persistent volume claims
    annotations: {}

  ## @param resources Resource limits and requests for MongoDB pod
  resources:
    limits:
      memory: 512Mi
    requests:
      cpu: 50m
      memory: 512Mi

  ## @param nodeSelector Node selector for pod assignment
  nodeSelector: {}

  ## @param tolerations Tolerations for pod assignment
  tolerations: []

  ## @param affinity Affinity rules for pod assignment
  affinity: {}

  containerSecurityContext:
    ## @param securityContext.runAsUser User ID to run the container
    runAsUser: 999
    ## @param securityContext.runAsNonRoot Run as non-root user
    runAsNonRoot: true
    ## @param containerSecurityContext.allowPrivilegeEscalation Set MongoDB container's privilege escalation
    allowPrivilegeEscalation: false

  ## @param podSecurityContext Security context for the pod
  podSecurityContext:
    ## @param podSecurityContext.fsGroup Set MongoDB pod's Security Context fsGroup
    fsGroup: 999

  livenessProbe:
    ## @param livenessProbe.enabled Enable liveness probe
    enabled: true
    ## @param livenessProbe.initialDelaySeconds Initial delay before starting probes
    initialDelaySeconds: 30
    ## @param livenessProbe.periodSeconds How often to perform the probe
    periodSeconds: 10
    ## @param livenessProbe.timeoutSeconds Timeout for each probe attempt
    timeoutSeconds: 5
    ## @param livenessProbe.failureThreshold Number of failures before pod is restarted
    failureThreshold: 6
    ## @param livenessProbe.successThreshold Number of successes to mark probe as successful
    successThreshold: 1

  readinessProbe:
    ## @param readinessProbe.enabled Enable readiness probe
    enabled: true
    ## @param readinessProbe.initialDelaySeconds Initial delay before starting probes
    initialDelaySeconds: 5
    ## @param readinessProbe.periodSeconds How often to perform the probe
    periodSeconds: 10
    ## @param readinessProbe.timeoutSeconds Timeout for each probe attempt
    timeoutSeconds: 5
    ## @param readinessProbe.failureThreshold Number of failures before pod is marked unready
    failureThreshold: 6
    ## @param readinessProbe.successThreshold Number of successes to mark probe as successful
    successThreshold: 1

  ## @param extraEnv Additional environment variables to set
  extraEnv: []
  # - name: EXTRA_VAR
  #   value: "extra_value"

  ## @param extraVolumes Additional volumes to add to the pod
  extraVolumes: []

  ## @param extraVolumeMounts Additional volume mounts to add to the MongoDB container
  extraVolumeMounts: []